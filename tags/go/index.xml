<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on It's Always the Network</title><link>https://blog.itsalwaysthe.network/tags/go/</link><description>Recent content in go on It's Always the Network</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.itsalwaysthe.network/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Comparing the Basics of Go and Python for New Programmers -- Part 2</title><link>https://blog.itsalwaysthe.network/posts/comparing-go-and-python-part-2/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.itsalwaysthe.network/posts/comparing-go-and-python-part-2/</guid><description>Part One of this series comparing Go and Python can be found here.
In Part One, I covered some of the differences between Python and Go when it comes to packaging and looping. This time, I want to cover a (slightly?) more advanced topic: blocking vs. non-blocking HTTP calls. To do this, we&amp;rsquo;ll write the same application in both Python and Go. This tiny demo application will retrieve the names of the original 150 Pokemon from a public API.</description></item><item><title>Comparing the Basics of Go and Python for New Programmers -- Part 1</title><link>https://blog.itsalwaysthe.network/posts/comparing-go-and-python/</link><pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.itsalwaysthe.network/posts/comparing-go-and-python/</guid><description>I&amp;rsquo;m not trying to start a flame war, I swear. So let&amp;rsquo;s start off with this: if you&amp;rsquo;re already fluent in either Python or Go, this blog post isn&amp;rsquo;t meant to change your mind. Instead, it aims to compare some fundamental operations in each language and talk about how I feel about them. This is only Part 1. If it&amp;rsquo;s well-received, I&amp;rsquo;ll write more. If it&amp;rsquo;s not, I won&amp;rsquo;t.
The title of this post includes the words for New Programmers, but it does expect the reader to have at least a passing familiarity with programming &amp;ndash; or at least be able to understand pseudo-code.</description></item><item><title>Refactoring Apps Safely with Istio</title><link>https://blog.itsalwaysthe.network/posts/refactor-app-with-istio/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.itsalwaysthe.network/posts/refactor-app-with-istio/</guid><description>This blog post will walk you through rewriting a portion of a service safely, 100% in production, by leveraging Istio&amp;rsquo;s routing features. It features a basic service with the following endpoints:
/healhtz: a healthcheck endpoint that always responds with a 200 status code /: the base endpoint, which generates a random number a random number of times Later, we&amp;rsquo;ll discover that the random number generation function in our original service is suffering from horrible performance.</description></item></channel></rss>